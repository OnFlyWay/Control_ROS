#include "ros/ros.h"  
#include "std_msgs/Int16.h" 
#include <ros/ros.h>
#include <ros/console.h>
#include <nav_msgs/Path.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Quaternion.h>
#include <geometry_msgs/PoseStamped.h>
#include <tf/transform_broadcaster.h>
#include <tf/tf.h>
#include <turtlesim/Pose.h>
#define offset 5.44  
nav_msgs::Path path;
geometry_msgs::PoseStamped pose_stamped;
void listen_message(const turtlesim::Pose::ConstPtr& msg)  
{   
  pose_stamped.pose.position.x = -((msg->x)-offset);
  pose_stamped.pose.position.y = -((msg->y)-offset);

  geometry_msgs::Quaternion goal_quat = tf::createQuaternionMsgFromYaw(msg->theta);
  pose_stamped.pose.orientation.x = goal_quat.x;
  pose_stamped.pose.orientation.y = goal_quat.y;
  pose_stamped.pose.orientation.z = goal_quat.z;
  pose_stamped.pose.orientation.w = goal_quat.w;
  
  ros::Time current_time;
  current_time = ros::Time::now();
  pose_stamped.header.stamp=current_time;
  pose_stamped.header.frame_id="world";
}
int main(int argc, char **argv)  
{
  ros::init(argc, argv, "draw_path");
  ros::NodeHandle n;
  ros::Publisher path_pub = n.advertise<nav_msgs::Path>("draw_move_path",10, true);
  ros::Subscriber sub = n.subscribe("/turtle1/pose", 10, listen_message); 
  ros::Time current_time, last_time;
  current_time = ros::Time::now();
  last_time = ros::Time::now();

  path.header.stamp=current_time;
  path.header.frame_id="world";
  ros::Rate loop_rate(10);
  ros::spinOnce();         
  ros::Duration(3).sleep();
  
  while (ros::ok())
  {
    path.poses.push_back(pose_stamped);
    path_pub.publish(path);
    ros::spinOnce();         
    loop_rate.sleep();
  }
 return 0;
}
